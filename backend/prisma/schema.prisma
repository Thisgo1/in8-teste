// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  firstName String?
  lastName  String?
  hash      String
  image     String?
  addresses Address[]
  orders    Order[]
  bookmarks Bookmark[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PaymentMethods PaymentMethods[]

  @@map("users")
}

model PaymentMethods {
  id          Int             @id @default(autoincrement())
  userId      Int
  user        User            @relation(fields: [userId], references: [id])
  provider    PaymentProvider
  last4Digits String?
  brand       String?
  isDefault   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isMock      Boolean         @default(true)
}

model Bookmark {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  link        String

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookmarks")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  city       String
  state      String
  postalCode String
  complement String?
  number     Int
  country    String   @default("Brasil")
  isDefault  Boolean? @default(false)
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  Order      Order[]
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  total       Float
  status      OrderStatus @default(PENDING)
  paymentId   String?
  addressId   Int?
  address     Address?    @relation(fields: [addressId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ProductSnapshot {
  id          String       @id @default(uuid())
  productId   String
  name        String
  price       Float
  description String?
  imageUrl    String?
  provider    ProviderType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  OrderItem   OrderItem[]

  @@index([productId])
}

model OrderItem {
  id          Int              @id @default(autoincrement())
  orderId     Int
  order       Order            @relation(fields: [orderId], references: [id])
  productId   String // ID do produto na API externa
  name        String
  price       Float
  quantity    Int
  provider    ProviderType
  imageUrl    String?
  description String?
  snapshotId  String?
  snapshot    ProductSnapshot? @relation(fields: [snapshotId], references: [id])

  discount Float?  @default(0.0)
  notes    String?

  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ProviderType {
  BRASILIAN
  EUROPEAN
}

enum PaymentProvider {
  CREDIT_CARD
  PIX
  PAYPAL
  BANK_SLIT
}
